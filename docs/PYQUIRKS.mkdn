# Python Функции Правил

# Оглавление
1. Введение
2. Создание модуля
3. Функции в модуле
4. Command Requirements
5. Completed Quirk Function
# 1. Введение
При помощи этого руководства вы узнаете:

* Как сделать свои собственные Функции Правил
* ОЧЕНЬ базовый синтаксис Python

Вы ни в коем случае не узнаете отсюда:

* Как писать бекенд на Python
* Как испечь пирог
* Смысл жизни

В этом руководстве будут
<pre>
Инструкции в таких прямоугольничков.
Если вы будете следовать этим инструкциям,
то вы сможете сделать обычную Функцию Правил reverse().
</pre>

# 2. Создание модуля
Все Модули Функции Правил создаются и хранятся в папке ```quirks/```. Имя файла <b>должно</b> заканчиваться '.py'.
У вас может быть несколько Функции Правил для.

Каждый модуль также может иметь функцию настройки, которая будет вызываться один раз в момент загрузки модуля.

<pre>
Создаём файл reverse.py в папке quirks.
</pre>

# 3. Функции в модуле
If you've ever done programming before, you should know what a function is. If not, I suggest picking up a good programming book (or e-book).

In Python, function syntax looks like this:

def function_name(myvar1, myvar2):

'def' is used to declare that this is a function, and 'function_name' is obviously the name of your function.
'myvar1' and 'myvar2' are variables coming into your function. For most of your functions, the only variable being passed will be 'text'.

In Python, curly braces ({}) are not used to declare the beginning and end of a function. Instead, a colon (:) is used to declare the beginning of a function. After that, indentation is used to declare the body and end of a function.

```python
def reverserep(text):
    return text[::-1]
```

# 4. Command Requirements
For a function to be registered as a Quirk Function, it must conform to three simple rules:

1.  It must have a command name.
2.  It must take exactly one arguement.
3.  It must return a string.

What is meant by having a command name, is that a name for the Quirk Function has to be defined. This is done by defining the 'command' variable for a function.

function_name.command = "name"

```python
reverserep.command = "reverse"
```

# 5. Completed Quirk Function
Below is the completed, fully working, reverse Quirk Function. After it I will break down the pieces of each line.

```python
def reverserep(text):
    return text[::-1]
reverserep.command = "reverse"
```

As stated before, to start a function, you need to use the keyword 'def'. All Quirk Functions must take exactly one argument (in this case 'text').
In this example, the text is reversed and returned all in one line. 'text[::-1]' is the Pythonic way of reversing a list or string.
The last line is the most important part. This tells Pesterchum to call this function whenever 'reverse()' is used in a quirk.
